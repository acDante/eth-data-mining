To learn the policy that recommends news articles to users we use the LinUCB algorithm with disjoint linear models. The algorithm does take into account the article features, therefore the set_articles function returns without using them.
The recommend function has the user features and the available articles as parameters. If an article is new, we initialize its corresponding arrays used by the policy. For every available article the UCB is calculated and then the article with the maximum UCB is chosen for recommendation.
If the chosen article matches the displayed article in the log, the result of choosing this article (click or no click) is fed back to our policy via the update method (reward 0 or 1 accordingly), where the corresponding arrays are updated according to the algorithm.
We optimize the performance of the algorithm by storing infrequently updated computationally expensive results (the inverse of A and theta for each article), updating them along with the policy arrays in the update function. These results are used to compute the UCB without being repeatedly computed for every available article in each iteration.
Another optimization implemented is scaling the rewards from 0 for no click and 1 for click to -1 and 20 respectively, to compensate for the 1 in 20 chance for each log line to contain a click.
Finally, after experimenting with the parameter delta, used for the calculation of the input parameter alpha for the LinUCB algorithm, we set it at 0.05.
